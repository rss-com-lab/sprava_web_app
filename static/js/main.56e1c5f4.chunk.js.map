{"version":3,"sources":["components/checkbox/checkbox.js","api/saveEvents.js","components/event/event.js","components/eventContainer/eventContainer.js","App.js","serviceWorker.js","index.js"],"names":["Checkbox","state","isChecked","toggleCheckboxChange","event","handleCheckboxChange","_this","props","setState","_ref","_this$props","this","label","id","react_default","a","createElement","className","type","value","checked","onChange","React","Component","addEvent","checkedEventsList","document","querySelectorAll","idArray","i","length","push","replace","localStorage","setItem","Event","eventName","location","time","description","checkbox_checkbox","saveEvents","cn","concat","EventContainer","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","displayData","getSavedEventList","bind","assertThisInitialized","_this2","getItem","split","map","elem","parseInt","eventsList","forEach","currentEvent","find","prevState","Fragment","components_event_event","key","App","eventContainer_eventContainer","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.56e1c5f4.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Checkbox extends React.Component {\n  state = {\n    isChecked: false,\n  }\n\n  toggleCheckboxChange = (event) => {\n    const { handleCheckboxChange } = this.props;\n\n    this.setState(({ isChecked }) => (\n      {\n        isChecked: !isChecked,\n      }\n    ));\n\n    handleCheckboxChange(event);\n  }\n\n  render() {\n    const { label, id } = this.props;\n    const { isChecked } = this.state;\n\n    return (\n      <div className=\"checkbox\">\n        <label>\n          <input\n            type=\"checkbox\"\n            value={label}\n            checked={isChecked}\n            onChange={this.toggleCheckboxChange}\n            id={id}\n          />\n\n          {label}\n        </label>\n      </div>\n    );\n  }\n}\n\nCheckbox.propTypes = {\n  id: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  handleCheckboxChange: PropTypes.func.isRequired,\n};\n\nexport default Checkbox;\n","export default function addEvent() {\n  const checkedEventsList = document.querySelectorAll('input:checked');\n  const idArray = [];\n  for (let i = 0; i < checkedEventsList.length; i += 1) {\n    idArray.push(checkedEventsList[i].id.replace(/\\D+/g, ''));\n  }\n  localStorage.setItem('checkedEventList', idArray);\n}\n","import React from 'react';\n\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\n\nimport Checkbox from '../checkbox/checkbox';\n\nimport saveEvents from '../../api/saveEvents';\n\nimport './event.scss';\n\nconst Event = ({\n  id, eventName, location, time, description,\n}) => (\n  <div className=\"events-section__event-container\" id={id}>\n    <div className=\"events-section__event-checkbox\">\n      <Checkbox label=\"Выбрать\" handleCheckboxChange={saveEvents} id={cn(`choose-event-${id}`)} />\n    </div>\n    <h4 className=\"events-section__event-header\">{eventName}</h4>\n    <div>\n      <span className=\"events-section__event-location\">\n        {location}\n      </span>\n      <span className=\"events-section__event-time\">\n        {time}\n      </span>\n    </div>\n    <p className=\"events-section__event-descr\">\n      {description}\n    </p>\n  </div>\n);\n\nEvent.propTypes = {\n  id: PropTypes.number.isRequired,\n  eventName: PropTypes.string.isRequired,\n  location: PropTypes.string.isRequired,\n  time: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n};\n\nexport default Event;\n","import React from 'react';\n\nimport Event from '../event/event';\n\nimport eventsList from '../../eventsData/eventsList';\n\nimport './eventContainer.scss';\n\nclass EventContainer extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      displayData: [],\n    };\n    this.getSavedEventList.bind(this);\n  }\n\n  componentDidMount() {\n    this.getSavedEventList();\n  }\n\n  getSavedEventList() {\n    const savedEventsListId = (localStorage.getItem('checkedEventList'))\n      ? localStorage.getItem('checkedEventList').split(',').map(elem => parseInt(elem, 10))\n      : eventsList.map(event => parseInt(event.id, 10));\n    savedEventsListId.forEach((elem) => {\n      const currentEvent = eventsList.find(event => event.id === elem);\n      this.setState(prevState => (prevState.displayData.push(currentEvent)));\n    });\n  }\n\n  render() {\n    const { displayData } = this.state;\n    return (\n      <>\n        {displayData.map(event => (\n          <Event\n            key={event.id}\n            id={event.id}\n            eventName={event.eventName}\n            location={event.location}\n            time={event.time}\n            description={event.description}\n          />\n        ))}\n      </>\n    );\n  }\n}\n\nexport default EventContainer;\n","import React from 'react';\n\nimport EventsContainer from './components/eventContainer/eventContainer';\n// import ControlBtns from './components/controlBtns/controlBtns';\n\nimport './App.scss';\n\nconst App = () => (\n  <div className=\"App\">\n    {/* <ControlBtns /> */}\n    <EventsContainer />\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.1/8 is considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                );\n  \n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n  \n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister();\n      });\n    }\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.register();\n"],"sourceRoot":""}