{"version":3,"sources":["components/checkbox/checkbox.js","api/saveEvents.js","components/event/event.js","components/eventContainer/eventContainer.js","App.js","index.js"],"names":["Checkbox","state","isChecked","toggleCheckboxChange","event","handleCheckboxChange","_this","props","setState","_ref","_this$props","this","label","id","react_default","a","createElement","className","type","value","checked","onChange","React","Component","addEvent","checkedEventsList","document","querySelectorAll","idArray","i","length","push","replace","localStorage","setItem","Event","eventName","location","time","description","checkbox_checkbox","saveEvents","cn","concat","EventContainer","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","displayData","getSavedEventList","bind","assertThisInitialized","_this2","getItem","split","map","elem","parseInt","eventsList","forEach","currentEvent","find","prevState","Fragment","components_event_event","key","App","eventContainer_eventContainer","ReactDOM","render","src_App_0","getElementById"],"mappings":"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","file":"static/js/main.c1906dbd.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Checkbox extends React.Component {\n  state = {\n    isChecked: false,\n  }\n\n  toggleCheckboxChange = (event) => {\n    const { handleCheckboxChange } = this.props;\n\n    this.setState(({ isChecked }) => (\n      {\n        isChecked: !isChecked,\n      }\n    ));\n\n    handleCheckboxChange(event);\n  }\n\n  render() {\n    const { label, id } = this.props;\n    const { isChecked } = this.state;\n\n    return (\n      <div className=\"checkbox\">\n        <label>\n          <input\n            type=\"checkbox\"\n            value={label}\n            checked={isChecked}\n            onChange={this.toggleCheckboxChange}\n            id={id}\n          />\n\n          {label}\n        </label>\n      </div>\n    );\n  }\n}\n\nCheckbox.propTypes = {\n  id: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  handleCheckboxChange: PropTypes.func.isRequired,\n};\n\nexport default Checkbox;\n","export default function addEvent() {\n  const checkedEventsList = document.querySelectorAll('input:checked');\n  const idArray = [];\n  for (let i = 0; i < checkedEventsList.length; i += 1) {\n    idArray.push(checkedEventsList[i].id.replace(/\\D+/g, ''));\n  }\n  localStorage.setItem('checkedEventList', idArray);\n}\n","import React from 'react';\n\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\n\nimport Checkbox from '../checkbox/checkbox';\n\nimport saveEvents from '../../api/saveEvents';\n\nimport './event.scss';\n\nconst Event = ({\n  id, eventName, location, time, description,\n}) => (\n  <div className=\"events-section__event-container\" id={id}>\n    <div className=\"events-section__event-checkbox\">\n      <Checkbox label=\"Выбрать\" handleCheckboxChange={saveEvents} id={cn(`choose-event-${id}`)} />\n    </div>\n    <h4 className=\"events-section__event-header\">{eventName}</h4>\n    <div>\n      <span className=\"events-section__event-location\">\n        {location}\n      </span>\n      <span className=\"events-section__event-time\">\n        {time}\n      </span>\n    </div>\n    <p className=\"events-section__event-descr\">\n      {description}\n    </p>\n  </div>\n);\n\nEvent.propTypes = {\n  id: PropTypes.number.isRequired,\n  eventName: PropTypes.string.isRequired,\n  location: PropTypes.string.isRequired,\n  time: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n};\n\nexport default Event;\n","import React from 'react';\n\nimport Event from '../event/event';\n\nimport eventsList from '../../eventsData/eventsList';\n\nimport './eventContainer.scss';\n\nclass EventContainer extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      displayData: [],\n    };\n    this.getSavedEventList.bind(this);\n  }\n\n  componentDidMount() {\n    this.getSavedEventList();\n  }\n\n  getSavedEventList() {\n    const savedEventsListId = (localStorage.getItem('checkedEventList'))\n      ? localStorage.getItem('checkedEventList').split(',').map(elem => parseInt(elem, 10))\n      : eventsList.map(event => parseInt(event.id, 10));\n    savedEventsListId.forEach((elem) => {\n      const currentEvent = eventsList.find(event => event.id === elem);\n      this.setState(prevState => (prevState.displayData.push(currentEvent)));\n    });\n  }\n\n  render() {\n    const { displayData } = this.state;\n    return (\n      <>\n        {displayData.map(event => (\n          <Event\n            key={event.id}\n            id={event.id}\n            eventName={event.eventName}\n            location={event.location}\n            time={event.time}\n            description={event.description}\n          />\n        ))}\n      </>\n    );\n  }\n}\n\nexport default EventContainer;\n","import React from 'react';\n\nimport EventsContainer from './components/eventContainer/eventContainer';\n// import ControlBtns from './components/controlBtns/controlBtns';\n\nimport './App.scss';\n\nconst App = () => (\n  <div className=\"App\">\n    {/* <ControlBtns /> */}\n    <EventsContainer />\n  </div>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}